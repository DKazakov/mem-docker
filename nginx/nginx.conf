worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  16;
    client_max_body_size 100m;

    gzip  on;

    server {
        listen              80;
        server_name         localhost;
        charset             utf-8;
        send_timeout        1s;

        ssi                 on;
        ssi_last_modified   on;
        ssi_types           *;

        location ~ ^/wp(.*) {
            rewrite ^/wp(.*) $1 break;
            proxy_set_header    Accept-Encoding ""; 
            proxy_pass          http://memdocker_wp_1:80;
            proxy_set_header    X-Real-IP $remote_addr;  
            proxy_set_header    Host $http_host;  
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;  
        }
        location ~ /testssi/(?<path>.+) {
            add_header  Content-Type text/plain;
            set         $resp 'location $path mkay';
            return      200 $resp;
        }
        location = /redis {
            internal;

            set_unescape_uri        $query $arg_query;
            redis2_connect_timeout  1s;
            redis2_query            get $query;
            redis2_pass             memdocker_redis_1:6379;
        }
        location = /get {
            internal;

            add_header  'Access-Control-Allow-Origin' '*';
            content_by_lua '
                local res = ngx.location.capture("/redis",
                    { args = { query = ngx.var.arg_q } }
                )
                local arr = {}
                for i in string.gmatch(res.body, "%S+") do
                    table.insert(arr, i)
                end

                if arr[1] == "$-1" then
                    ngx.print(ngx.var.default_content)
                else
                    len = #arr
                    local string = arr[2]
                    for i = 3, len do
                        string = string .. " " .. arr[i]
                    end
                    ngx.print(string)
                end
            ';
        }
        location = /json {
            set     $default_content '{}';
            rewrite ^ /get;
        }
        location = /text {
            set     $default_content '--';
            rewrite ^ /get;
        }
        location / {
            proxy_set_header    Accept-Encoding ""; 
            proxy_pass          http://memdocker_frontend_1:3000;
            proxy_set_header    X-Real-IP $remote_addr;  
            proxy_set_header    Host $http_host;  
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;  
        }
    }
}
